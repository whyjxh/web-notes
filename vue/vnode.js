/**
 * vnode
 * vnode 本质是一个对象，对dom的一种抽象；
 * 
 * 目的；
 * 减少dom的操作，因为操作dom成本高，减少重绘和回流；
 * 实现更好跨平台；
 * 
 */
/**
 * vnode创建
 * vnode tree的创建
 * vnode 更新；
 * vnode diff；
 */

/**
 * vnode diff
 * 按照dom层级进行对比；
 * 按类型进行比较，如果发现类型不对，则不进行diff；直接创建新类型 vnode，，替换旧节点；
 * 把新旧节点看作两个数组；
 * 1、头头对比，如果找到，把新节点patch到旧节点，头指针后移；
 * 2、尾尾对比，如果找到，把新节点patch到旧节点，尾指针前移；
 * 3、旧尾新头对比，如果找到，把新节点patch到旧节点，旧尾前移，新头后移；
 * 4、旧头新尾，如果找到，把新节点patch到旧节点，旧头后移，新尾前移；
 * 5、利用key对比；用新指针对应节点的key去旧节点数组中找对应的节点；
 * 有三种情况；
 * 1、当没有对应的key，那么创建新的节点；头指针后移；
 * 2、如果有相同的key并且是相同节点，就把新节点patch到旧节点；
 * 3、如果有key但不是相同节点，则创建新节点；
 * 
 * 当出现头指针超过为指针，循环结束；
 * 结束之后存在两种情况
 * 1、先对比旧数组的头尾指针，如果旧数组完成，可能新数组还没遍历完成，添加新数组中漏掉的节点；
 * 2、在对比新数组头尾指针，如果新数组遍历完了，就数组还没有遍历完成，删除旧节点漏掉的节点；
 */

/**
 * diff比较
 * 1、比较是否是相同节点（key、tag、isComment、data是否都相同）如果相同则进行patch，如果不同，则直接进行替换；
 * 2、如果旧节点和新节点都有text，而且不相同，则直接设置为新节点text；
 * 3、如果新旧节点都有子元素，而且不相同，就进行子元素对比；如果新节点有子元素，旧的没有，则创建；反之，则删除；
 * 4、进行vue diff比较；跳到 vnode diff;
 */